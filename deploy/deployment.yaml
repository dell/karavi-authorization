apiVersion: apps/v1
kind: Deployment
metadata:
  name: powerflex-reverse-proxy
  labels:
    app: powerflex-reverse-proxy
spec:
  replicas: 1
  selector:
    matchLabels:
      app: powerflex-reverse-proxy
  template:
    metadata:
      labels:
        app: powerflex-reverse-proxy
    spec:
      containers:
      - name: powerflex-reverse-proxy
        image: powerflex-reverse-proxy:v0.0.2
        ports:
        - containerPort: 8080
      - name: opa
        image: openpolicyagent/opa
        args:
        - "run"
        - "--ignore=."
        - "--server"
        - "--log-level=debug"
        ports:
        - name: http
          containerPort: 8181
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: github-auth-provider
  labels:
    app: github-auth-provider
spec:
  replicas: 1
  selector:
    matchLabels:
      app: github-auth-provider
  template:
    metadata:
      labels:
        app: github-auth-provider
    spec:
      containers:
      - name: github-auth-provider
        image: github-auth-provider:v0.0.2
        ports:
        - containerPort: 50051
          name: grpc
---
apiVersion: apps/v1 
kind: Deployment
metadata:
  name: redis-master
  labels:
    app: redis
spec:
  selector:
    matchLabels:
      app: redis
      role: master
      tier: backend
  replicas: 1
  template:
    metadata:
      labels:
        app: redis
        role: master
        tier: backend
    spec:
      containers:
      - name: master
        image: redis:6.0.8-alpine
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
        ports:
        - containerPort: 6379
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-commander
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis-commander
  template:
    metadata:
      labels:
        app: redis-commander
        tier: backend
    spec:
      containers:
      - name: redis-commander
        image: rediscommander/redis-commander:latest
        env:
        - name: REDIS_HOSTS
          value: "rbac:redis.default.svc.cluster.local:6379"
        - name: K8S_SIGTERM
          value: "1"
        ports:
        - name: redis-commander
          containerPort: 8081
        livenessProbe:
          httpGet:
            path: /favicon.png
            port: 8081
          initialDelaySeconds: 10
          timeoutSeconds: 5
        #resources:
        #  limits:
        #    cpu: "500m"
        #    memory: "512M"
        securityContext:
          runAsNonRoot: true
          readOnlyRootFilesystem: false
          allowPrivilegeEscalation: false
          capabilities:
            drop:
              - ALL

---
apiVersion: v1
kind: Service
metadata:
  name: github-auth-provider
spec:
  selector:
    app: github-auth-provider
  ports:
  - port: 50051
    targetPort: 50051
    name: grpc
---
apiVersion: v1
kind: Service
metadata:
  name: powerflex-reverse-proxy
spec:
  selector:
    app: powerflex-reverse-proxy
  ports:
  - name: http
    protocol: TCP
    port: 8080
    targetPort: 8080
---
apiVersion: v1
kind: Service
metadata:
  name: redis
spec:
  selector:
    app: redis
  ports:
  - protocol: TCP
    port: 6379
    targetPort: 6379
---
apiVersion: v1
kind: Service
metadata:
  name: redis-commander
spec:
  selector:
    app: redis-commander
  ports:
  - protocol: TCP
    port: 8081
    targetPort: 8081
---
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: powerflex-reverse-proxy
  namespace: default
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/rewrite-target: /
spec:
  rules:
  - http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          serviceName: powerflex-reverse-proxy
          servicePort: 8080
  - host: "admin.gatekeeper.cluster"
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          serviceName: redis-commander
          servicePort: 8081
---
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: github-auth-provider
  namespace: default
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/grpc-backend: "true"
    nginx.ingress.kubernetes.io/backend-protocol: "GRPC"
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/server-snippet: "grpc_read_timeout 3600s; grpc_send_timeout 3600s;"
spec:
  rules:
  - host: "grpc.gatekeeper.cluster"
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          serviceName: github-auth-provider
          servicePort: grpc
