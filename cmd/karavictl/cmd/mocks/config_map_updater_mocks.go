// Code generated by MockGen. DO NOT EDIT.
// Source: karavi-authorization/cmd/karavictl/cmd (interfaces: ConfigMapUpdater)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	types "karavi-authorization/cmd/karavictl/cmd/types"
	reflect "reflect"
)

// MockConfigMapUpdater is a mock of ConfigMapUpdater interface
type MockConfigMapUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockConfigMapUpdaterMockRecorder
}

// MockConfigMapUpdaterMockRecorder is the mock recorder for MockConfigMapUpdater
type MockConfigMapUpdaterMockRecorder struct {
	mock *MockConfigMapUpdater
}

// NewMockConfigMapUpdater creates a new mock instance
func NewMockConfigMapUpdater(ctrl *gomock.Controller) *MockConfigMapUpdater {
	mock := &MockConfigMapUpdater{ctrl: ctrl}
	mock.recorder = &MockConfigMapUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockConfigMapUpdater) EXPECT() *MockConfigMapUpdaterMockRecorder {
	return m.recorder
}

// ModifyCommonConfigMap mocks base method
func (m *MockConfigMapUpdater) ModifyCommonConfigMap(arg0 map[string][]types.Role) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModifyCommonConfigMap", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ModifyCommonConfigMap indicates an expected call of ModifyCommonConfigMap
func (mr *MockConfigMapUpdaterMockRecorder) ModifyCommonConfigMap(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyCommonConfigMap", reflect.TypeOf((*MockConfigMapUpdater)(nil).ModifyCommonConfigMap), arg0)
}
