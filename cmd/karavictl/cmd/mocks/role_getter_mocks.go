// Code generated by MockGen. DO NOT EDIT.
// Source: karavi-authorization/cmd/karavictl/cmd (interfaces: RoleGetter)

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	types "karavi-authorization/cmd/karavictl/cmd/types"
	reflect "reflect"
)

// MockRoleGetter is a mock of RoleGetter interface
type MockRoleGetter struct {
	ctrl     *gomock.Controller
	recorder *MockRoleGetterMockRecorder
}

// MockRoleGetterMockRecorder is the mock recorder for MockRoleGetter
type MockRoleGetterMockRecorder struct {
	mock *MockRoleGetter
}

// NewMockRoleGetter creates a new mock instance
func NewMockRoleGetter(ctrl *gomock.Controller) *MockRoleGetter {
	mock := &MockRoleGetter{ctrl: ctrl}
	mock.recorder = &MockRoleGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRoleGetter) EXPECT() *MockRoleGetterMockRecorder {
	return m.recorder
}

// GetRoles mocks base method
func (m *MockRoleGetter) GetRoles() (map[string][]types.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoles")
	ret0, _ := ret[0].(map[string][]types.Role)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRoles indicates an expected call of GetRoles
func (mr *MockRoleGetterMockRecorder) GetRoles() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoles", reflect.TypeOf((*MockRoleGetter)(nil).GetRoles))
}
